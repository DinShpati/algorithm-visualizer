{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimation","undefined","console","log","quicksortLomuto","swap","temp","left","right","pivot","partitionLomuto","bubbleSort","inputArr","swapped","len","tmp","heapSort","arr","n","parseInt","maxHeapify","largest","l","r","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","height","getWindowDimensions","width","showMenu","bind","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","barOneHeight","barTwoHeight","colorOfBar","getHeapSortAnimation","getBubbleSortAnimation","event","preventDefault","className","onClick","mergeSort","quickSort","map","value","idx","React","Component","whichOne","window","innerWidth","innerHeight","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00e9429d.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  //Quicksort algirithm\r\n  export function getQuickSortAnimation(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    if (array === undefined) return array;\r\n    //quicksort(array, 0, array.length-1, animations);\r\n    console.log(quicksortLomuto(array, 0, array.length - 1, animations));\r\n    \r\n    return animations;\r\n  }\r\n\r\n  // First write the swap function, which is just a helper function to swap values of the array.\r\nfunction swap(array, i, j, animations) {\r\n  animations.push([i, j, array[i], array[j], true, 'secondary']);\r\n  animations.push([i, j, array[i], array[j], true, 'primary']);\r\n  var temp = array[i];\r\n  array[i] = array[j];\r\n  array[j] = temp;\r\n}\r\n\r\nfunction quicksortLomuto(array, left, right, animations) {\r\n  // left-pointer would be the index of the first element which is 0 and right-pointer would be the index of the last element which would be (length -1).\r\n  left = left || 0;\r\n  right = right || array.length - 1;\r\n\r\n  var pivot = partitionLomuto(array, left, right, animations);\r\n  animations.push([pivot, 'pivot', 0, 0, false, 'secondary']);\r\n  animations.push([pivot, 'pivot', 0, 0, false, 'primary']);\r\n\r\n  if (left < pivot - 1) {\r\n      quicksortLomuto(array, left, pivot - 1, animations);\r\n  }\r\n\r\n  if (right > pivot) {\r\n      quicksortLomuto(array, pivot - 1, right, animations)\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nfunction partitionLomuto(array, left, right, animations) {\r\n  // Lomuto algorithm always uses the last element, array[right], for the pivot.\r\n  var pivot = right;\r\n  animations.push([pivot, 'pivot', 0, 0, false, 'secondary']);\r\n  animations.push([pivot, 'pivot', 0, 0, false, 'primary']);\r\n  var i = left;\r\n\r\n  /*The logic under Lomuto is, we start from the leftmost element and keep track of index of smaller (or equal to) elements as j. While traversing, if we find a smaller element, we swap current element with arr[j]. Otherwise we ignore current element.*/\r\n  for (var j = left; j < right; j++) {\r\n      if (array[j] <= array[pivot]) {\r\n          swap(array, i, j, animations);\r\n          i++\r\n      }else{\r\n        animations.push([i, j, array[i], array[j], false, 'secondary']);\r\n        animations.push([i, j, array[i], array[j], false, 'primary']);\r\n      }\r\n  }\r\n  swap(array, i, j, animations);\r\n  return i;\r\n}\r\n\r\n//another version of the quick sort function that runs at a better runtime but cant be aimated\r\n  /*function quicksort(array, animations) {\r\n    if (array.length <= 1) {\r\n      return array;\r\n    }\r\n  \r\n    var pivot = array[0];\r\n    \r\n    var left = []; \r\n    var right = [];\r\n  \r\n    for (var i = 1; i < array.length; i++) {\r\n      if(array[i] < pivot){\r\n        left.push(array[i])\r\n      }else{\r\n        right.push(array[i])\r\n      }\r\n      //array[i] < pivot ? left.push(array[i]) : right.push(array[i]);\r\n    }\r\n    \r\n    return quicksort(left).concat(pivot, quicksort(right));\r\n  };*/\r\n\r\n\r\n//Bubble Sort Algorithm\r\nexport function getBubbleSortAnimation(array) {\r\n  const animations = [];\r\n    if (array.length <= 1) return array;\r\n    if (array === undefined) return array;\r\n    //quicksort(array, 0, array.length-1, animations);\r\n    console.log(bubbleSort(array, animations));\r\n    \r\n    return animations;\r\n}\r\nlet bubbleSort = (inputArr, animations) => {\r\n  let len = inputArr.length;\r\n  let swapped;\r\n  do {\r\n      swapped = false;\r\n      for (let i = 0; i < len; i++) {\r\n          if (inputArr[i] > inputArr[i + 1]) {\r\n              animations.push([i, i+1, inputArr[i], inputArr[i+1], true, 'secondary']);\r\n              animations.push([i, i+1, inputArr[i], inputArr[i+1], true, 'primary']);\r\n              let tmp = inputArr[i];\r\n              inputArr[i] = inputArr[i + 1];\r\n              inputArr[i + 1] = tmp;\r\n              swapped = true;\r\n          }else{\r\n            if(inputArr[i+1]){\r\n              animations.push([i, i+1, inputArr[i], inputArr[i+1], false, 'secondary']);\r\n              animations.push([i, i+1, inputArr[i], inputArr[i+1], false, 'primary']);\r\n            }else{\r\n              animations.push([i, null, inputArr[i], null, false, 'secondary']);\r\n              animations.push([i, null, inputArr[i], null, false, 'primary']);\r\n            }\r\n            \r\n          }\r\n      }\r\n  } while (swapped);\r\n  return inputArr;\r\n};\r\n\r\n\r\n//Heap Sort Algorithm\r\n\r\nexport function getHeapSortAnimation(array) {\r\n  const animations = [];\r\n    if (array.length <= 1) return array;\r\n    if (array === undefined) return array;\r\n    //quicksort(array, 0, array.length-1, animations);\r\n    console.log(heapSort(array, array.length, animations));\r\n    \r\n    return animations;\r\n}\r\n // main function to do heap sort \r\n const heapSort = (arr, n, animations) => { \r\n  // Build heap (rearrange array) \r\n  for (let i = parseInt(n / 2 - 1); i >= 0; i--) {\r\n      maxHeapify(arr, n, i, animations); \r\n  }\r\n\r\n  // One by one extract an element from heap \r\n  for (let i = n - 1; i >= 0; i--) { \r\n     // Move current root to end \r\n     animations.push([i, 0, arr[i], arr[0], true, 'secondary']);\r\n      animations.push([i, 0, arr[i], arr[0], true, 'primary']);\r\n     let temp = arr[0]; \r\n     arr[0] = arr[i]; \r\n     arr[i] = temp; \r\n\r\n     // call max heapify on the reduced heap \r\n     maxHeapify(arr, i, 0, animations); \r\n  } \r\n}\r\nconst maxHeapify = (arr, n, i, animations) => {\r\n  let largest = i;\r\n  let l = 2 * i + 1; //left child index\r\n  let r = 2 * i + 2; //right child index\r\n  \r\n  //If left child is smaller than root\r\n   if (l < n && arr[l] > arr[largest]) {\r\n         largest = l; \r\n   }\r\n  \r\n   // If right child is smaller than smallest so far \r\n   if (r < n && arr[r] > arr[largest]) {\r\n        largest = r; \r\n   }\r\n  \r\n   // If smallest is not root \r\n   if (largest != i) { \r\n      animations.push([i, largest, arr[i], arr[largest], true, 'secondary']);\r\n      animations.push([i, largest, arr[i], arr[largest], true, 'primary']);\r\n        let temp = arr[i]; \r\n        arr[i] = arr[largest]; \r\n        arr[largest] = temp; \r\n  \r\n      // Recursively heapify the affected sub-tree \r\n      maxHeapify(arr, n, largest, animations); \r\n    } \r\n}\r\n\r\n","import React from 'react';\r\nimport {getMergeSortAnimations, getQuickSortAnimation, getBubbleSortAnimation, getHeapSortAnimation} from '../sortingAlgorithms/sortingAlgorithms';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 3;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#ff0080';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = '#00FF7F';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            height: getWindowDimensions('height') * .8,\r\n            width: getWindowDimensions('width')/7.9,\r\n            showMenu: false,\r\n        }\r\n\r\n        this.showMenu = this.showMenu.bind(this);\r\n\r\n    }\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i =0; i < this.state.width; i++){\r\n            array.push(randomIntFromInterval(5, this.state.height));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    mergeSort() {\r\n        const animations = getMergeSortAnimations(this.state.array);\r\n        console.log(animations)\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n          const isColorChange = i % 3 !== 2;\r\n          if (isColorChange) {\r\n            const [barOneIdx, barTwoIdx] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animations[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * ANIMATION_SPEED_MS);\r\n          }\r\n        }\r\n      }\r\n\r\n    quickSort(){\r\n        const animations = getQuickSortAnimation(this.state.array);\r\n        console.log(animations)\r\n        for (let i = 0; i < animations.length; i++) {\r\n          const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight, swap, colorOfBar] = animations[i];\r\n            if(barTwoIdx === 'pivot'){\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                let color = PRIMARY_COLOR;\r\n                let width = '5px'\r\n                if(colorOfBar === 'primary'){\r\n                    color = PRIMARY_COLOR;\r\n                    width = '5px';\r\n                }else{\r\n                    color = 'yellow';\r\n                    width = '10px';\r\n                }\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barOneStyle.width = width;\r\n                }, i * ANIMATION_SPEED_MS);\r\n            }else{\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                let color = PRIMARY_COLOR;\r\n                if(colorOfBar === 'primary'){\r\n                    color = PRIMARY_COLOR;\r\n                }else{\r\n                    color = SECONDARY_COLOR\r\n                }\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n                if(swap){\r\n                    setTimeout(() => {\r\n                        barOneStyle.height = `${barTwoHeight}px`;\r\n                        barTwoStyle.height = `${barOneHeight}px`;\r\n                    }, i * ANIMATION_SPEED_MS);\r\n                }\r\n                if(barOneStyle.backgroundColor === SECONDARY_COLOR || barTwoStyle.backgroundColor === SECONDARY_COLOR){\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    heapSort(){\r\n        const animations = getHeapSortAnimation(this.state.array);\r\n        console.log(animations)\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight, swap, colorOfBar] = animations[i];\r\n            if(barTwoIdx === null){\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                let color = PRIMARY_COLOR;\r\n                if(colorOfBar === 'primary'){\r\n                    color = PRIMARY_COLOR;\r\n                }else{\r\n                    color = SECONDARY_COLOR\r\n                }\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                }, ((i * ANIMATION_SPEED_MS)*2));\r\n            }else{\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                let color = PRIMARY_COLOR;\r\n                if(colorOfBar === 'primary'){\r\n                    color = PRIMARY_COLOR;\r\n                }else{\r\n                    color = SECONDARY_COLOR\r\n                }\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, ((i * ANIMATION_SPEED_MS)*2));\r\n                if(swap){\r\n                    setTimeout(() => {\r\n                        barOneStyle.height = `${barTwoHeight}px`;\r\n                        barTwoStyle.height = `${barOneHeight}px`;\r\n                    }, ((i * ANIMATION_SPEED_MS)*2));\r\n                }\r\n                if(barOneStyle.backgroundColor === SECONDARY_COLOR || barTwoStyle.backgroundColor === SECONDARY_COLOR){\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    bubbleSort(){\r\n        const animations = getBubbleSortAnimation(this.state.array);\r\n        console.log(animations)\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n            const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight, swap, colorOfBar] = animations[i];\r\n            if(barTwoIdx === null){\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                let color = PRIMARY_COLOR;\r\n                if(colorOfBar === 'primary'){\r\n                    color = PRIMARY_COLOR;\r\n                }else{\r\n                    color = SECONDARY_COLOR\r\n                }\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                }, (i * ANIMATION_SPEED_MS)/3);\r\n            }else{\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                let color = PRIMARY_COLOR;\r\n                if(colorOfBar === 'primary'){\r\n                    color = PRIMARY_COLOR;\r\n                }else{\r\n                    color = SECONDARY_COLOR\r\n                }\r\n                setTimeout(() => {\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n                }, (i * ANIMATION_SPEED_MS)/3);\r\n                if(swap){\r\n                    setTimeout(() => {\r\n                        barOneStyle.height = `${barTwoHeight}px`;\r\n                        barTwoStyle.height = `${barOneHeight}px`;\r\n                    }, (i * ANIMATION_SPEED_MS)/3);\r\n                }\r\n                if(barOneStyle.backgroundColor === SECONDARY_COLOR || barTwoStyle.backgroundColor === SECONDARY_COLOR){\r\n                    barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n                    barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    //open dropwdown\r\n    showMenu(event) {\r\n        event.preventDefault();\r\n        \r\n        if(this.state.showMenu){\r\n            this.setState({\r\n                showMenu: false,\r\n              });\r\n        }else{\r\n            this.setState({\r\n                showMenu: true,\r\n              });\r\n        }\r\n\r\n        \r\n      }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <div className=\"array-container\">\r\n                <div className=\"menu\">\r\n                    <div><button onClick={()=>{this.resetArray()}} className=\"generateArray\">New Array</button></div>\r\n                    <div><button onClick={()=>{this.mergeSort()}} className=\"generateArray\">Merge Sort</button></div>\r\n                    <div><button onClick={() => {this.quickSort()}} className=\"generateArray\">Quick Sort</button></div>\r\n                    <div><button onClick={() => {this.bubbleSort()}} className=\"generateArray\">Bubble Sort</button></div>\r\n                    <div><button onClick={() => {this.heapSort()}}>Heap Sort</button></div>\r\n                   {/* <div className=\"AlgoDropwDown\">\r\n                        <button onClick={this.showMenu} type=\"button\">\r\n                        Choose Algorithm\r\n                        </button>\r\n                        {\r\n                        this.state.showMenu\r\n                            ? (\r\n                        <div className=\"dropdown-menu\">\r\n                            <button onClick={() => this.mergeSort()} type=\"button\">Merge Sort</button>\r\n                            <button onClick={() => {this.quickSort()}}>Quick Sort</button>\r\n                            <button onClick={() => {this.heapSort()}}>Heap Sort</button>\r\n                            <button onClick={() => {this.bubbleSort()}}>Bubble Sort</button>\r\n                        </div>\r\n                        )\r\n                        : (\r\n                          null\r\n                        )}\r\n                        </div>*/}\r\n                </div>\r\n                {array.map((value, idx) => {\r\n                    return <div className=\"array-bar\" key={idx} style={{height: `${value}px`}}>\r\n\r\n                    </div>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\nfunction getWindowDimensions(whichOne) {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    if(whichOne === 'height'){\r\n        return height;\r\n    }else{\r\n        return width;\r\n    }\r\n  }","import './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}