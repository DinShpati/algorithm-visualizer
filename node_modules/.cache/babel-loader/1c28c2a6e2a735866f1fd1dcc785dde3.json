{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\Personal Projects\\\\algo-visual\\\\src\\\\SortingVisualizer\\\\SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n      height: getWindowDimensions('height') * .8,\n      width: getWindowDimensions('width') / 3\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < this.state.width; i++) {\n      array.push(randomIntFromInterval(5, this.state.height));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: array.map((value, idx) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-bar\",\n          style: {\n            height: `${value}px`\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 28\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction getWindowDimensions(whichOne) {\n  const {\n    innerWidth: width,\n    innerHeight: height\n  } = window;\n\n  if (whichOne === 'height') {\n    return height;\n  } else {\n    return width;\n  }\n}","map":{"version":3,"sources":["D:/Github/Personal Projects/algo-visual/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","SortingVisualizer","Component","constructor","props","state","array","height","getWindowDimensions","width","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","render","map","value","idx","min","max","Math","floor","random","whichOne","innerWidth","innerHeight","window"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP;;AAEA,eAAe,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAA+C;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,MAAM,EAAEC,mBAAmB,CAAC,QAAD,CAAnB,GAAgC,EAF/B;AAGTC,MAAAA,KAAK,EAAED,mBAAmB,CAAC,OAAD,CAAnB,GAA6B;AAH3B,KAAb;AAKH;;AACDE,EAAAA,iBAAiB,GAAE;AACf,SAAKC,UAAL;AACH;;AAEDA,EAAAA,UAAU,GAAE;AACR,UAAML,KAAK,GAAG,EAAd;;AACA,SAAI,IAAIM,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAG,KAAKP,KAAL,CAAWI,KAA7B,EAAoCG,CAAC,EAArC,EAAwC;AACpCN,MAAAA,KAAK,CAACO,IAAN,CAAWC,qBAAqB,CAAC,CAAD,EAAI,KAAKT,KAAL,CAAWE,MAAf,CAAhC;AACH;;AACD,SAAKQ,QAAL,CAAc;AAACT,MAAAA;AAAD,KAAd;AACH;;AAEDU,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACV,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA,gBACKC,KAAK,CAACW,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,KAAgB;AACvB,4BAAO;AAAK,UAAA,SAAS,EAAC,WAAf;AAAqC,UAAA,KAAK,EAAE;AAACZ,YAAAA,MAAM,EAAG,GAAEW,KAAM;AAAlB;AAA5C,WAAgCC,GAAhC;AAAA;AAAA;AAAA;AAAA,gBAAP;AAGH,OAJA;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAlCyD;;AAqC9D,SAASL,qBAAT,CAA+BM,GAA/B,EAAoCC,GAApC,EAAwC;AACpC,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACH;;AACD,SAASZ,mBAAT,CAA6BiB,QAA7B,EAAuC;AACnC,QAAM;AAAEC,IAAAA,UAAU,EAAEjB,KAAd;AAAqBkB,IAAAA,WAAW,EAAEpB;AAAlC,MAA6CqB,MAAnD;;AACA,MAAGH,QAAQ,KAAK,QAAhB,EAAyB;AACrB,WAAOlB,MAAP;AACH,GAFD,MAEK;AACD,WAAOE,KAAP;AACH;AACF","sourcesContent":["import React from 'react';\r\nimport './SortingVisualizer.css';\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            height: getWindowDimensions('height') * .8,\r\n            width: getWindowDimensions('width')/3,\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i =0; i < this.state.width; i++){\r\n            array.push(randomIntFromInterval(5, this.state.height));\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => {\r\n                    return <div className=\"array-bar\" key={idx} style={{height: `${value}px`}}>\r\n\r\n                    </div>\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\nfunction getWindowDimensions(whichOne) {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    if(whichOne === 'height'){\r\n        return height;\r\n    }else{\r\n        return width;\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}