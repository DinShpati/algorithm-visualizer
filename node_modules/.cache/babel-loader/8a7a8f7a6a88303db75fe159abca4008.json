{"ast":null,"code":"export const mergeSortA = array => {\n  console.log(array);\n  if (array.length <= 1) return array;\n  const middleIdx = Math.floor(array.length / 2);\n  const firstHalf = mergeSort(array.slice[(0, middleIdx)]);\n  const secondHalf = mergeSort(array.slice[middleIdx]);\n  const sortedArray = [];\n  let i = 0,\n      j = 0;\n\n  while (i < firstHalf.length && j < secondHalf.length) {\n    if (firstHalf[i] < secondHalf[j]) {\n      sortedArray.push(firstHalf[i++]);\n    } else {\n      sortedArray.push(secondHalf[j++]);\n    }\n  }\n\n  while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n\n  while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n\n  return sortedArray;\n};","map":{"version":3,"sources":["D:/Github/Personal Projects/algo-visual/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSortA","array","console","log","length","middleIdx","Math","floor","firstHalf","mergeSort","slice","secondHalf","sortedArray","i","j","push"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAIC,KAAD,IAAW;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,MAAGA,KAAK,CAACG,MAAN,IAAgB,CAAnB,EAAsB,OAAOH,KAAP;AACtB,QAAMI,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWN,KAAK,CAACG,MAAN,GAAa,CAAxB,CAAlB;AACA,QAAMI,SAAS,GAAGC,SAAS,CAACR,KAAK,CAACS,KAAN,EAAY,GAAGL,SAAf,EAAD,CAA3B;AACA,QAAMM,UAAU,GAAGF,SAAS,CAACR,KAAK,CAACS,KAAN,CAAYL,SAAZ,CAAD,CAA5B;AACA,QAAMO,WAAW,GAAG,EAApB;AACA,MAAIC,CAAC,GAAE,CAAP;AAAA,MACIC,CAAC,GAAE,CADP;;AAGA,SAAOD,CAAC,GAAGL,SAAS,CAACJ,MAAd,IAAwBU,CAAC,GAAGH,UAAU,CAACP,MAA9C,EAAqD;AACjD,QAAGI,SAAS,CAACK,CAAD,CAAT,GAAeF,UAAU,CAACG,CAAD,CAA5B,EAAgC;AAC5BF,MAAAA,WAAW,CAACG,IAAZ,CAAiBP,SAAS,CAACK,CAAC,EAAF,CAA1B;AACH,KAFD,MAEK;AACDD,MAAAA,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;AACH;AACJ;;AACD,SAAOD,CAAC,GAAGL,SAAS,CAACJ,MAArB,EAA6BQ,WAAW,CAACG,IAAZ,CAAiBP,SAAS,CAACK,CAAC,EAAF,CAA1B;;AAC7B,SAAOC,CAAC,GAAGH,UAAU,CAACP,MAAtB,EAA8BQ,WAAW,CAACG,IAAZ,CAAiBJ,UAAU,CAACG,CAAC,EAAF,CAA3B;;AAC9B,SAAOF,WAAP;AACH,CApBM","sourcesContent":["export const mergeSortA = (array) => {\r\n    console.log(array)\r\n    if(array.length <= 1) return array;\r\n    const middleIdx = Math.floor(array.length/2);\r\n    const firstHalf = mergeSort(array.slice[0, middleIdx]);\r\n    const secondHalf = mergeSort(array.slice[middleIdx]);\r\n    const sortedArray = [];\r\n    let i =0,\r\n        j =0;\r\n\r\n    while (i < firstHalf.length && j < secondHalf.length){\r\n        if(firstHalf[i] < secondHalf[j]){\r\n            sortedArray.push(firstHalf[i++]);\r\n        }else{\r\n            sortedArray.push(secondHalf[j++]);\r\n        }\r\n    }\r\n    while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\r\n    while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\r\n    return sortedArray;\r\n};"]},"metadata":{},"sourceType":"module"}