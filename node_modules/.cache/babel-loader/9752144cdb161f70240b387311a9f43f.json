{"ast":null,"code":"export function mergeSort(array) {\n  let arrayLength = array.length;\n  let midpoint = arrayLength / 2;\n  let firstHalf = array.slice(0, midpoint);\n  let secondHalf = array.slice(midpoint, arrayLength);\n\n  if (arrayLength < 2) {\n    return array;\n  } else {\n    return merge(mergeSort(firstHalf), mergeSort(secondHalf)); // ^ *** only required change made here ***\n  }\n}\n\nfunction merge(arrayOne, arrayTwo) {\n  let sorted = [];\n\n  while (arrayOne.length > 0 && arrayTwo.length > 0) {\n    if (arrayOne[0] < arrayTwo[0]) {\n      sorted.push(arrayOne.shift());\n    } else {\n      sorted.push(arrayTwo.shift());\n    }\n  }\n\n  return sorted.concat(arrayOne).concat(arrayTwo);\n}","map":{"version":3,"sources":["D:/Github/Personal Projects/algo-visual/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["mergeSort","array","arrayLength","length","midpoint","firstHalf","slice","secondHalf","merge","arrayOne","arrayTwo","sorted","push","shift","concat"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAAyB;AAC5B,MAAIC,WAAW,GAAGD,KAAK,CAACE,MAAxB;AACA,MAAIC,QAAQ,GAAGF,WAAW,GAAC,CAA3B;AACA,MAAIG,SAAS,GAAGJ,KAAK,CAACK,KAAN,CAAY,CAAZ,EAAeF,QAAf,CAAhB;AACA,MAAIG,UAAU,GAAGN,KAAK,CAACK,KAAN,CAAYF,QAAZ,EAAsBF,WAAtB,CAAjB;;AACA,MAAGA,WAAW,GAAG,CAAjB,EAAmB;AACjB,WAAOD,KAAP;AACD,GAFD,MAEM;AACJ,WAAOO,KAAK,CAACR,SAAS,CAACK,SAAD,CAAV,EAAuBL,SAAS,CAACO,UAAD,CAAhC,CAAZ,CADI,CAEJ;AACD;AACF;;AACD,SAASC,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAkC;AAChC,MAAIC,MAAM,GAAG,EAAb;;AACA,SAAMF,QAAQ,CAACN,MAAT,GAAkB,CAAlB,IAAuBO,QAAQ,CAACP,MAAT,GAAkB,CAA/C,EAAiD;AAC/C,QAAGM,QAAQ,CAAC,CAAD,CAAR,GAAcC,QAAQ,CAAC,CAAD,CAAzB,EAA6B;AAC3BC,MAAAA,MAAM,CAACC,IAAP,CAAYH,QAAQ,CAACI,KAAT,EAAZ;AACD,KAFD,MAEM;AACJF,MAAAA,MAAM,CAACC,IAAP,CAAYF,QAAQ,CAACG,KAAT,EAAZ;AACD;AACF;;AACD,SAAOF,MAAM,CAACG,MAAP,CAAcL,QAAd,EAAwBK,MAAxB,CAA+BJ,QAA/B,CAAP;AACD","sourcesContent":["export function mergeSort(array){\r\n    let arrayLength = array.length;\r\n    let midpoint = arrayLength/2;\r\n    let firstHalf = array.slice(0, midpoint);\r\n    let secondHalf = array.slice(midpoint, arrayLength);\r\n    if(arrayLength < 2){\r\n      return array;\r\n    } else{\r\n      return merge(mergeSort(firstHalf), mergeSort(secondHalf));\r\n      // ^ *** only required change made here ***\r\n    }\r\n  }\r\n  function merge(arrayOne, arrayTwo){\r\n    let sorted = []\r\n    while(arrayOne.length > 0 && arrayTwo.length > 0){\r\n      if(arrayOne[0] < arrayTwo[0]){\r\n        sorted.push(arrayOne.shift());\r\n      } else{\r\n        sorted.push(arrayTwo.shift());\r\n      }\r\n    }\r\n    return sorted.concat(arrayOne).concat(arrayTwo);\r\n  }"]},"metadata":{},"sourceType":"module"}