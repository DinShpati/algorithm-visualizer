{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n} //Quicksort algirithm\n\n\nexport function getQuickSortAnimation(array) {\n  const animations = [];\n  quicksortHoare(array, 0, array.length - 1, animations);\n  return animations;\n} // First write the swap function, which is just a helper function to swap values of the array.\n\nfunction swap(array, i, j, animations) {\n  animations.push([left, right]);\n  animations.push([left, right]);\n  var temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n}\n\nfunction quicksortHoare(array, left, right, animations) {\n  var pivot;\n\n  if (array.length > 1) {\n    pivot = partitionHoare(array, left, right, animations); //index returned from partition\n\n    if (left < pivot - 1) {\n      //more elements on the left side of the pivot\n      quicksortHoare(array, left, pivot - 1, animations);\n    }\n\n    if (pivot < right) {\n      //more elements on the right side of the pivot\n      quicksortHoare(array, pivot, right, animations);\n    }\n  }\n\n  return animations;\n}\n/* Two indices that start at the ends of the array being partitioned, then move toward each other, until they detect an inversion: a pair of elements, one greater than the pivot, one smaller, that are in the wrong order relative to each other. The inverted elements are then swapped. \r\nHere the numerical values of left and right is continually getting updated with each inner while loop. But only if the while loop condition gets satisfied. That is, when the while loop condition is unsatisfied, e.g. for the first inner while loop, when array[left] > array[pivot] which means we have found a misplaced pair. \r\nThat is, although the left <= right (which is being made sure by the outer while loop) the actual elements are not sorted. Meaning a left side element is larger in value than the right side element. So, the code execution then jumps out of the inner while loop and goes right in to execute the swap function.\r\n*/\n\n\nfunction partitionHoare(array, left, right, animations) {\n  var pivot = Math.floor((left + right) / 2);\n\n  while (left < right) {\n    while (array[left] < array[pivot]) {\n      left++;\n    }\n\n    while (array[right] > array[pivot]) {\n      right--;\n    }\n\n    if (left <= right) {\n      swap(array, left, right);\n      left++;\n      right--;\n    }\n  }\n\n  return left;\n}","map":{"version":3,"sources":["D:/Github/Personal Projects/algo-visual/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","getQuickSortAnimation","quicksortHoare","swap","left","right","temp","pivot","partitionHoare"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  //Quicksort algirithm\r\n  export function getQuickSortAnimation(array) {\r\n    const animations = [];\r\n    quicksortHoare(array, 0, array.length-1, animations);\r\n    return animations;\r\n  }\r\n\r\n  // First write the swap function, which is just a helper function to swap values of the array.\r\n  function swap(array, i, j, animations) {\r\n    animations.push([left, right]);\r\n          animations.push([left, right]);\r\n    var temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n  }\r\n  function quicksortHoare(array, left, right, animations) {\r\n    var pivot;\r\n    if (array.length > 1) {\r\n      pivot = partitionHoare(array, left, right, animations); //index returned from partition\r\n        if (left < pivot - 1) { //more elements on the left side of the pivot\r\n          quicksortHoare(array, left, pivot - 1, animations);\r\n        }\r\n        if (pivot < right) { //more elements on the right side of the pivot\r\n          quicksortHoare(array, pivot, right, animations);\r\n        }\r\n    }\r\n\r\n    return animations;\r\n}\r\n/* Two indices that start at the ends of the array being partitioned, then move toward each other, until they detect an inversion: a pair of elements, one greater than the pivot, one smaller, that are in the wrong order relative to each other. The inverted elements are then swapped. \r\nHere the numerical values of left and right is continually getting updated with each inner while loop. But only if the while loop condition gets satisfied. That is, when the while loop condition is unsatisfied, e.g. for the first inner while loop, when array[left] > array[pivot] which means we have found a misplaced pair. \r\nThat is, although the left <= right (which is being made sure by the outer while loop) the actual elements are not sorted. Meaning a left side element is larger in value than the right side element. So, the code execution then jumps out of the inner while loop and goes right in to execute the swap function.\r\n*/\r\nfunction partitionHoare(array, left, right, animations) {\r\n  var pivot = Math.floor((left + right) / 2);\r\n\r\n  while (left < right) {\r\n      while (array[left] < array[pivot]) {\r\n          left++\r\n      }\r\n      while (array[right] > array[pivot]) {\r\n          right--\r\n      }\r\n\r\n      if (left <= right) {\r\n          swap(array, left, right);\r\n          left++\r\n          right--\r\n      }\r\n  }\r\n  return left;\r\n}"]},"metadata":{},"sourceType":"module"}